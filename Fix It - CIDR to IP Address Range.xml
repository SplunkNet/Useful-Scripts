<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2019-12-31 13:29:01">
<sys_script_fix action="INSERT_OR_UPDATE">
<active>true</active>
<before>false</before>
<description/>
<flush_cache>false</flush_cache>
<name>CIDR to IP Address</name>
<record_for_rollback>false</record_for_rollback>
<run_once>true</run_once>
<script><![CDATA[// reference:  http://www.tonton-pixel.com/my-scripts/cidr.js

var CIDR = '52.95.245.0/24';
var answer = cidrToIps(CIDR);
var start = answer[0];
var end = answer[1];
gs.info('CIDR: ' + CIDR + ' Start: ' + start + ' End: ' + end);

function int32ToBytes (int32)
{
	return [ (int32 >>> 24) & 0xFF, (int32 >>> 16) & 0xFF, (int32 >>> 8) & 0xFF, (int32 >>> 0) & 0xFF ];
}
function bytesToInt32 (bytes)
{
	return (((((bytes[0] * 256) + bytes[1]) * 256) + bytes[2]) * 256) + bytes[3];
}
function buildMask (size)
{
	return size ? -1 << (32 - size) : 0;
}
function applyMask (ip32, mask)
{
	// Unfortunately, cannot simply use:
	// return ip32 & mask;
	// since JavaScript bitwise operations deal with 32-bit *signed* integers...
	var ipBytes = int32ToBytes (ip32);
	var maskBytes = int32ToBytes (mask);
	var maskedBytes = [ ];
	for (var index = 0; index < ipBytes.length; index++)
	{
		maskedBytes.push (ipBytes[index] & maskBytes[index]);
	}
	return bytesToInt32 (maskedBytes);
}
function ip32ToIp (ip32)
{
	var ip = false;
	if ((typeof ip32 === 'number') && isFinite (ip32))
	{
		ip = int32ToBytes (ip32 & 0xFFFFFFFF).join ('.');
	}
	return ip;
}
function ipToIp32 (ip)
{
	var ip32 = false;
	if (typeof ip === 'string')
	{
		var matches = ip.match (/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);
		if (matches)
		{
			var ipBytes = [ ];
			for (var index = 1; index < matches.length; index++)
			{
				var ipByte = parseInt (matches[index]);
				if ((ipByte >= 0) && (ipByte <= 255))
				{
					ipBytes.push (ipByte);
				}
			}
			if (ipBytes.length === 4)
			{
				ip32 = bytesToInt32 (ipBytes);
			}
		}
	}
	return ip32;
}
function cidrToIps (cidr)
{
	var ips = false;
	if (typeof cidr === 'string')
	{
		var matches = cidr.match (/^(\d+\.\d+\.\d+\.\d+)\/(\d+)$/);
		if (matches)
		{
			var ip32 = ipToIp32 (matches[1]);
			var prefixSize = parseInt (matches[2]);
			if ((typeof ip32 === 'number') && (prefixSize >= 0) && (prefixSize <= 32))
			{
				var mask = buildMask (prefixSize);
				var start = applyMask (ip32, mask);
				ips = [ ip32ToIp (start), ip32ToIp (start - mask - 1) ];
			}
		}
	}
	return ips;
}]]></script>
<sys_class_name>sys_script_fix</sys_class_name>
<sys_created_by>tgoodhew</sys_created_by>
<sys_created_on>2019-12-23 20:43:59</sys_created_on>
<sys_id>c7d7edd7db390010b914e9c9489619bc</sys_id>
<sys_mod_count>10</sys_mod_count>
<sys_name>CIDR to IP Address</sys_name>
<sys_package display_value="Global" source="global">global</sys_package>
<sys_policy/>
<sys_scope display_value="Global">global</sys_scope>
<sys_update_name>sys_script_fix_c7d7edd7db390010b914e9c9489619bc</sys_update_name>
<sys_updated_by>tgoodhew</sys_updated_by>
<sys_updated_on>2019-12-23 20:55:37</sys_updated_on>
<unloadable>false</unloadable>
</sys_script_fix>
</unload>
